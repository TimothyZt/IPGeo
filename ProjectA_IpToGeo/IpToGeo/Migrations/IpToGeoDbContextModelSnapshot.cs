// <auto-generated />
using System;
using IpToGeo.IpToCityDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IpToGeo.Migrations
{
    [DbContext(typeof(IpToGeoDbContext))]
    partial class IpToGeoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IpToGeo.Models.GeoliteCityIpv4Int", b =>
                {
                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("CountryCode")
                        .HasColumnType("longtext");

                    b.Property<uint?>("IpRangeEnd")
                        .HasColumnType("int unsigned");

                    b.Property<uint?>("IpRangeStart")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Postcode")
                        .HasColumnType("longtext");

                    b.Property<string>("State1")
                        .HasColumnType("longtext");

                    b.Property<string>("State2")
                        .HasColumnType("longtext");

                    b.Property<string>("Timezone")
                        .HasColumnType("longtext");

                    b.ToTable("ipToGeoCity", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
